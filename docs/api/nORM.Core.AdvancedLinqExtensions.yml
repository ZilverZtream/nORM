### YamlMime:ManagedReference
items:
- uid: nORM.Core.AdvancedLinqExtensions
  commentId: T:nORM.Core.AdvancedLinqExtensions
  id: AdvancedLinqExtensions
  parent: nORM.Core
  children:
  - nORM.Core.AdvancedLinqExtensions.AverageAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.AverageAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.AverageAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.AverageAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.MaxAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.MaxAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.MinAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.MinAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.SumAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.SumAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.SumAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  - nORM.Core.AdvancedLinqExtensions.SumAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: AdvancedLinqExtensions
  nameWithType: AdvancedLinqExtensions
  fullName: nORM.Core.AdvancedLinqExtensions
  type: Class
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: AdvancedLinqExtensions
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 16
  assemblies:
  - nORM
  namespace: nORM.Core
  summary: Compact aggregate extensions for nORM using numeric generics
  example: []
  syntax:
    content: public static class AdvancedLinqExtensions
    content.vb: Public Module AdvancedLinqExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: nORM.Core.AdvancedLinqExtensions.SumAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.SumAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  id: SumAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.SumAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.SumAsync<TSource, TResult>(nORM.Core.INormQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: SumAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 20
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult> SumAsync<TSource, TResult>(this INormQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken ct = default) where TSource : class, new() where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: nORM.Core.INormQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function SumAsync(Of TSource As {Class, New}, TResult As {Structure, INumber(Of TResult)})(source As INormQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: nORM.Core.AdvancedLinqExtensions.SumAsync*
  nameWithType.vb: AdvancedLinqExtensions.SumAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.SumAsync(Of TSource, TResult)(nORM.Core.INormQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.SumAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.SumAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  id: SumAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.SumAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.SumAsync<TSource, TResult>(nORM.Core.INormQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: SumAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 25
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult?> SumAsync<TSource, TResult>(this INormQueryable<TSource> source, Expression<Func<TSource, TResult?>> selector, CancellationToken ct = default) where TSource : class, new() where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: nORM.Core.INormQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{System.Nullable{{TResult}}}
    content.vb: Public Shared Function SumAsync(Of TSource As {Class, New}, TResult As {Structure, INumber(Of TResult)})(source As INormQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), ct As CancellationToken = Nothing) As Task(Of TResult?)
  overload: nORM.Core.AdvancedLinqExtensions.SumAsync*
  nameWithType.vb: AdvancedLinqExtensions.SumAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.SumAsync(Of TSource, TResult)(nORM.Core.INormQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.SumAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.SumAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  id: SumAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.SumAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.SumAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: SumAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 30
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult> SumAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken ct = default) where TSource : class where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function SumAsync(Of TSource As Class, TResult As {Structure, INumber(Of TResult)})(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: nORM.Core.AdvancedLinqExtensions.SumAsync*
  nameWithType.vb: AdvancedLinqExtensions.SumAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.SumAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.SumAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.SumAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  id: SumAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.SumAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.SumAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: SumAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 35
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult?> SumAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult?>> selector, CancellationToken ct = default) where TSource : class where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{System.Nullable{{TResult}}}
    content.vb: Public Shared Function SumAsync(Of TSource As Class, TResult As {Structure, INumber(Of TResult)})(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), ct As CancellationToken = Nothing) As Task(Of TResult?)
  overload: nORM.Core.AdvancedLinqExtensions.SumAsync*
  nameWithType.vb: AdvancedLinqExtensions.SumAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.SumAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.AverageAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.AverageAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  id: AverageAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.AverageAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.AverageAsync<TSource, TResult>(nORM.Core.INormQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: AverageAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 44
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult> AverageAsync<TSource, TResult>(this INormQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken ct = default) where TSource : class, new() where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: nORM.Core.INormQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function AverageAsync(Of TSource As {Class, New}, TResult As {Structure, INumber(Of TResult)})(source As INormQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: nORM.Core.AdvancedLinqExtensions.AverageAsync*
  nameWithType.vb: AdvancedLinqExtensions.AverageAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.AverageAsync(Of TSource, TResult)(nORM.Core.INormQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.AverageAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.AverageAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  id: AverageAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.AverageAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.AverageAsync<TSource, TResult>(nORM.Core.INormQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: AverageAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 49
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult?> AverageAsync<TSource, TResult>(this INormQueryable<TSource> source, Expression<Func<TSource, TResult?>> selector, CancellationToken ct = default) where TSource : class, new() where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: nORM.Core.INormQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{System.Nullable{{TResult}}}
    content.vb: Public Shared Function AverageAsync(Of TSource As {Class, New}, TResult As {Structure, INumber(Of TResult)})(source As INormQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), ct As CancellationToken = Nothing) As Task(Of TResult?)
  overload: nORM.Core.AdvancedLinqExtensions.AverageAsync*
  nameWithType.vb: AdvancedLinqExtensions.AverageAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.AverageAsync(Of TSource, TResult)(nORM.Core.INormQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.AverageAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.AverageAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  id: AverageAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.AverageAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.AverageAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: AverageAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 54
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult> AverageAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken ct = default) where TSource : class where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function AverageAsync(Of TSource As Class, TResult As {Structure, INumber(Of TResult)})(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: nORM.Core.AdvancedLinqExtensions.AverageAsync*
  nameWithType.vb: AdvancedLinqExtensions.AverageAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.AverageAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.AverageAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.AverageAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  id: AverageAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.AverageAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.AverageAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: AverageAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 59
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult?> AverageAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult?>> selector, CancellationToken ct = default) where TSource : class where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{System.Nullable{{TResult}}}
    content.vb: Public Shared Function AverageAsync(Of TSource As Class, TResult As {Structure, INumber(Of TResult)})(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), ct As CancellationToken = Nothing) As Task(Of TResult?)
  overload: nORM.Core.AdvancedLinqExtensions.AverageAsync*
  nameWithType.vb: AdvancedLinqExtensions.AverageAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.AverageAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.MinAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.MinAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  id: MinAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: MinAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.MinAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.MinAsync<TSource, TResult>(nORM.Core.INormQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: MinAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 68
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult> MinAsync<TSource, TResult>(this INormQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken ct = default) where TSource : class, new() where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: nORM.Core.INormQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function MinAsync(Of TSource As {Class, New}, TResult As {Structure, INumber(Of TResult)})(source As INormQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: nORM.Core.AdvancedLinqExtensions.MinAsync*
  nameWithType.vb: AdvancedLinqExtensions.MinAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.MinAsync(Of TSource, TResult)(nORM.Core.INormQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)
  name.vb: MinAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.MinAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.MinAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  id: MinAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: MinAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.MinAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.MinAsync<TSource, TResult>(nORM.Core.INormQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: MinAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 73
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult?> MinAsync<TSource, TResult>(this INormQueryable<TSource> source, Expression<Func<TSource, TResult?>> selector, CancellationToken ct = default) where TSource : class, new() where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: nORM.Core.INormQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{System.Nullable{{TResult}}}
    content.vb: Public Shared Function MinAsync(Of TSource As {Class, New}, TResult As {Structure, INumber(Of TResult)})(source As INormQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), ct As CancellationToken = Nothing) As Task(Of TResult?)
  overload: nORM.Core.AdvancedLinqExtensions.MinAsync*
  nameWithType.vb: AdvancedLinqExtensions.MinAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.MinAsync(Of TSource, TResult)(nORM.Core.INormQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Threading.CancellationToken)
  name.vb: MinAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  id: MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.MinAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: MinAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 78
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult> MinAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken ct = default) where TSource : class where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function MinAsync(Of TSource As Class, TResult As {Structure, INumber(Of TResult)})(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: nORM.Core.AdvancedLinqExtensions.MinAsync*
  nameWithType.vb: AdvancedLinqExtensions.MinAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.MinAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)
  name.vb: MinAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  id: MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.MinAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: MinAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 83
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult?> MinAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult?>> selector, CancellationToken ct = default) where TSource : class where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{System.Nullable{{TResult}}}
    content.vb: Public Shared Function MinAsync(Of TSource As Class, TResult As {Structure, INumber(Of TResult)})(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), ct As CancellationToken = Nothing) As Task(Of TResult?)
  overload: nORM.Core.AdvancedLinqExtensions.MinAsync*
  nameWithType.vb: AdvancedLinqExtensions.MinAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.MinAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Threading.CancellationToken)
  name.vb: MinAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.MaxAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.MaxAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  id: MaxAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: MaxAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.MaxAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.MaxAsync<TSource, TResult>(nORM.Core.INormQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: MaxAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 88
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult> MaxAsync<TSource, TResult>(this INormQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken ct = default) where TSource : class, new() where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: nORM.Core.INormQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function MaxAsync(Of TSource As {Class, New}, TResult As {Structure, INumber(Of TResult)})(source As INormQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: nORM.Core.AdvancedLinqExtensions.MaxAsync*
  nameWithType.vb: AdvancedLinqExtensions.MaxAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.MaxAsync(Of TSource, TResult)(nORM.Core.INormQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)
  name.vb: MaxAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.MaxAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.MaxAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  id: MaxAsync``2(nORM.Core.INormQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: MaxAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.MaxAsync<TSource, TResult>(INormQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.MaxAsync<TSource, TResult>(nORM.Core.INormQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: MaxAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 93
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult?> MaxAsync<TSource, TResult>(this INormQueryable<TSource> source, Expression<Func<TSource, TResult?>> selector, CancellationToken ct = default) where TSource : class, new() where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: nORM.Core.INormQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{System.Nullable{{TResult}}}
    content.vb: Public Shared Function MaxAsync(Of TSource As {Class, New}, TResult As {Structure, INumber(Of TResult)})(source As INormQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), ct As CancellationToken = Nothing) As Task(Of TResult?)
  overload: nORM.Core.AdvancedLinqExtensions.MaxAsync*
  nameWithType.vb: AdvancedLinqExtensions.MaxAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.MaxAsync(Of TSource, TResult)(nORM.Core.INormQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Threading.CancellationToken)
  name.vb: MaxAsync(Of TSource, TResult)(INormQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  id: MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.MaxAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: MaxAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 98
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult> MaxAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken ct = default) where TSource : class where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Shared Function MaxAsync(Of TSource As Class, TResult As {Structure, INumber(Of TResult)})(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: nORM.Core.AdvancedLinqExtensions.MaxAsync*
  nameWithType.vb: AdvancedLinqExtensions.MaxAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.MaxAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)
  name.vb: MaxAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
- uid: nORM.Core.AdvancedLinqExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  commentId: M:nORM.Core.AdvancedLinqExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  id: MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: nORM.Core.AdvancedLinqExtensions
  langs:
  - csharp
  - vb
  name: MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  nameWithType: AdvancedLinqExtensions.MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult?>>, CancellationToken)
  fullName: nORM.Core.AdvancedLinqExtensions.MaxAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/nORM/Core/AdvancedLinqExtensions.cs
      branch: main
      repo: https://github.com/ZilverZtream/nORM.git
    id: MaxAsync
    path: src/nORM/Core/AdvancedLinqExtensions.cs
    startLine: 103
  assemblies:
  - nORM
  namespace: nORM.Core
  syntax:
    content: 'public static Task<TResult?> MaxAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult?>> selector, CancellationToken ct = default) where TSource : class where TResult : struct, INumber<TResult>'
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
    - id: ct
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{System.Nullable{{TResult}}}
    content.vb: Public Shared Function MaxAsync(Of TSource As Class, TResult As {Structure, INumber(Of TResult)})(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), ct As CancellationToken = Nothing) As Task(Of TResult?)
  overload: nORM.Core.AdvancedLinqExtensions.MaxAsync*
  nameWithType.vb: AdvancedLinqExtensions.MaxAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
  fullName.vb: nORM.Core.AdvancedLinqExtensions.MaxAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Threading.CancellationToken)
  name.vb: MaxAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult?)), CancellationToken)
references:
- uid: nORM.Core
  commentId: N:nORM.Core
  href: nORM.html
  name: nORM.Core
  nameWithType: nORM.Core
  fullName: nORM.Core
  spec.csharp:
  - uid: nORM
    name: nORM
    href: nORM.html
  - name: .
  - uid: nORM.Core
    name: Core
    href: nORM.Core.html
  spec.vb:
  - uid: nORM
    name: nORM
    href: nORM.html
  - name: .
  - uid: nORM.Core
    name: Core
    href: nORM.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: nORM.Core.AdvancedLinqExtensions.SumAsync*
  commentId: Overload:nORM.Core.AdvancedLinqExtensions.SumAsync
  href: nORM.Core.AdvancedLinqExtensions.html#nORM_Core_AdvancedLinqExtensions_SumAsync__2_nORM_Core_INormQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Threading_CancellationToken_
  name: SumAsync
  nameWithType: AdvancedLinqExtensions.SumAsync
  fullName: nORM.Core.AdvancedLinqExtensions.SumAsync
- uid: nORM.Core.INormQueryable{{TSource}}
  commentId: T:nORM.Core.INormQueryable{``0}
  parent: nORM.Core
  definition: nORM.Core.INormQueryable`1
  href: nORM.Core.INormQueryable-1.html
  name: INormQueryable<TSource>
  nameWithType: INormQueryable<TSource>
  fullName: nORM.Core.INormQueryable<TSource>
  nameWithType.vb: INormQueryable(Of TSource)
  fullName.vb: nORM.Core.INormQueryable(Of TSource)
  name.vb: INormQueryable(Of TSource)
  spec.csharp:
  - uid: nORM.Core.INormQueryable`1
    name: INormQueryable
    href: nORM.Core.INormQueryable-1.html
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: nORM.Core.INormQueryable`1
    name: INormQueryable
    href: nORM.Core.INormQueryable-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TSource, TResult>>
  nameWithType: Expression<Func<TSource, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TResult>>
  nameWithType.vb: Expression(Of Func(Of TSource, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult))
  name.vb: Expression(Of Func(Of TSource, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: nORM.Core.INormQueryable`1
  commentId: T:nORM.Core.INormQueryable`1
  parent: nORM.Core
  href: nORM.Core.INormQueryable-1.html
  name: INormQueryable<T>
  nameWithType: INormQueryable<T>
  fullName: nORM.Core.INormQueryable<T>
  nameWithType.vb: INormQueryable(Of T)
  fullName.vb: nORM.Core.INormQueryable(Of T)
  name.vb: INormQueryable(Of T)
  spec.csharp:
  - uid: nORM.Core.INormQueryable`1
    name: INormQueryable
    href: nORM.Core.INormQueryable-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: nORM.Core.INormQueryable`1
    name: INormQueryable
    href: nORM.Core.INormQueryable-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TSource, TResult?>>
  nameWithType: Expression<Func<TSource, TResult?>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>
  nameWithType.vb: Expression(Of Func(Of TSource, TResult?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?))
  name.vb: Expression(Of Func(Of TSource, TResult?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{System.Nullable{{TResult}}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{``1}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult?>
  nameWithType: Task<TResult?>
  fullName: System.Threading.Tasks.Task<TResult?>
  nameWithType.vb: Task(Of TResult?)
  fullName.vb: System.Threading.Tasks.Task(Of TResult?)
  name.vb: Task(Of TResult?)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
- uid: System.Linq.IQueryable{{TSource}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<TSource>
  nameWithType: IQueryable<TSource>
  fullName: System.Linq.IQueryable<TSource>
  nameWithType.vb: IQueryable(Of TSource)
  fullName.vb: System.Linq.IQueryable(Of TSource)
  name.vb: IQueryable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
- uid: nORM.Core.AdvancedLinqExtensions.AverageAsync*
  commentId: Overload:nORM.Core.AdvancedLinqExtensions.AverageAsync
  href: nORM.Core.AdvancedLinqExtensions.html#nORM_Core_AdvancedLinqExtensions_AverageAsync__2_nORM_Core_INormQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Threading_CancellationToken_
  name: AverageAsync
  nameWithType: AdvancedLinqExtensions.AverageAsync
  fullName: nORM.Core.AdvancedLinqExtensions.AverageAsync
- uid: nORM.Core.AdvancedLinqExtensions.MinAsync*
  commentId: Overload:nORM.Core.AdvancedLinqExtensions.MinAsync
  href: nORM.Core.AdvancedLinqExtensions.html#nORM_Core_AdvancedLinqExtensions_MinAsync__2_nORM_Core_INormQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Threading_CancellationToken_
  name: MinAsync
  nameWithType: AdvancedLinqExtensions.MinAsync
  fullName: nORM.Core.AdvancedLinqExtensions.MinAsync
- uid: nORM.Core.AdvancedLinqExtensions.MaxAsync*
  commentId: Overload:nORM.Core.AdvancedLinqExtensions.MaxAsync
  href: nORM.Core.AdvancedLinqExtensions.html#nORM_Core_AdvancedLinqExtensions_MaxAsync__2_nORM_Core_INormQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___System_Threading_CancellationToken_
  name: MaxAsync
  nameWithType: AdvancedLinqExtensions.MaxAsync
  fullName: nORM.Core.AdvancedLinqExtensions.MaxAsync
