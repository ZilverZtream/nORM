using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Threading.Tasks;\nusing Microsoft.Data.Sqlite;\nusing nORM.Core;\nusing nORM.Providers;\nusing nORM.Navigation;\n\nnamespace nORM.Examples\n{\n    /// <summary>\n    /// Quick validation test to ensure our advanced features compile and work correctly\n    /// </summary>\n    public class QuickValidationTest\n    {\n        public static async Task<bool> RunValidationAsync()\n        {\n            try\n            {\n                // Setup\n                var connection = new SqliteConnection(\"Data Source=:memory:\");\n                await connection.OpenAsync();\n                \n                await CreateTestSchema(connection);\n                \n                var provider = new SqliteProvider();\n                var context = new DbContext(connection, provider);\n                \n                // Test 1: Advanced Aggregates\n                Console.WriteLine(\"Testing Advanced Aggregates...\");\n                \n                // Insert test data\n                for (int i = 1; i <= 10; i++)\n                {\n                    var user = new TestUser\n                    {\n                        Name = $\"User {i}\",\n                        Salary = 50000 + (i * 5000),\n                        Department = i % 2 == 0 ? \"Engineering\" : \"Sales\"\n                    };\n                    await context.InsertAsync(user);\n                }\n                \n                // Test Sum aggregate\n                var totalSalary = await context.Query<TestUser>()\n                    .SumAsync(u => u.Salary);\n                Console.WriteLine($\"Total Salary: ${totalSalary:N2}\");\n                \n                // Test GroupBy with aggregates\n                var deptStats = await context.Query<TestUser>()\n                    .GroupBy(u => u.Department)\n                    .Select(g => new {\n                        Department = g.Key,\n                        Count = g.Count(),\n                        AvgSalary = g.Average(u => u.Salary)\n                    })\n                    .ToListAsync();\n                \n                Console.WriteLine($\"Department stats count: {deptStats.Count}\");\n                \n                // Test 2: Navigation Properties\n                Console.WriteLine(\"Testing Navigation Properties...\");\n                \n                // Insert orders\n                for (int i = 1; i <= 5; i++)\n                {\n                    var order = new TestOrder\n                    {\n                        UserId = 1,\n                        Amount = 100 * i,\n                        ProductName = $\"Product {i}\"\n                    };\n                    await context.InsertAsync(order);\n                }\n                \n                // Test eager loading\n                var usersWithOrders = await context.Query<TestUser>()\n                    .Include(u => u.Orders)\n                    .Take(1)\n                    .ToListAsync();\n                    \n                Console.WriteLine($\"User with orders count: {usersWithOrders[0].Orders?.Count ?? 0}\");\n                \n                // Test lazy loading\n                var user = await context.Query<TestUser>().FirstAsync(u => u.Id == 2);\n                var orderCount = user.Orders?.Count ?? 0;\n                Console.WriteLine($\"Lazy loaded orders count: {orderCount}\");\n                \n                Console.WriteLine(\"✅ All tests passed!\");\n                return true;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"❌ Test failed: {ex.Message}\");\n                Console.WriteLine(ex.StackTrace);\n                return false;\n            }\n        }\n        \n        private static async Task CreateTestSchema(SqliteConnection connection)\n        {\n            var sql = @\"\n                CREATE TABLE TestUsers (\n                    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    Name TEXT NOT NULL,\n                    Salary DECIMAL(10,2) NOT NULL,\n                    Department TEXT NOT NULL\n                );\n                \n                CREATE TABLE TestOrders (\n                    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    UserId INTEGER NOT NULL,\n                    Amount DECIMAL(10,2) NOT NULL,\n                    ProductName TEXT NOT NULL,\n                    FOREIGN KEY (UserId) REFERENCES TestUsers(Id)\n                );\";\n            \n            using var cmd = connection.CreateCommand();\n            cmd.CommandText = sql;\n            await cmd.ExecuteNonQueryAsync();\n        }\n    }\n    \n    [Table(\"TestUsers\")]\n    public class TestUser\n    {\n        [Key]\n        public int Id { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public decimal Salary { get; set; }\n        public string Department { get; set; } = string.Empty;\n        \n        // Navigation property\n        public virtual ICollection<TestOrder>? Orders { get; set; }\n    }\n    \n    [Table(\"TestOrders\")]\n    public class TestOrder\n    {\n        [Key]\n        public int Id { get; set; }\n        public int UserId { get; set; }\n        public decimal Amount { get; set; }\n        public string ProductName { get; set; } = string.Empty;\n        \n        // Navigation property\n        public virtual TestUser? User { get; set; }\n    }\n}\n